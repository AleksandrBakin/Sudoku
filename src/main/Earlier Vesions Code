package masa.java.sudoku;

import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.*;

public class Field {
    private int[][] solutionField;
    private int[][] emptyField;
    int size = 9;
    int areaSize = (int) Math.sqrt(size);

    private final Random random = new Random();

    // Coordinates
    // [0] - [0] [1] [2] <> [3] [4] [5] <> [6] [7] [8]
    // [1] - [0] [1] [2] <> [3] [4] [5] <> [6] [7] [8]
    // [2] - [0] [1] [2] <> [3] [4] [5] <> [6] [7] [8]
    //
    // [3] - [0] [1] [2] <> [3] [4] [5] <> [6] [7] [8]
    // [4] - [0] [1] [2] <> [3] [4] [5] <> [6] [7] [8]
    // [5] - [0] [1] [2] <> [3] [4] [5] <> [6] [7] [8]
    //
    // [6] - [0] [1] [2] <> [3] [4] [5] <> [6] [7] [8]
    // [7] - [0] [1] [2] <> [3] [4] [5] <> [6] [7] [8]
    // [8] - [0] [1] [2] <> [3] [4] [5] <> [6] [7] [8]

    // Basic
    // [1] [2] [3] <> [4] [5] [6] <> [7] [8] [9]
    // [4] [5] [6] <> [7] [8] [9] <> [1] [2] [3]
    // [7] [8] [9] <> [1] [2] [3] <> [4] [5] [6]
    //
    // [2] [3] [4] <> [5] [6] [7] <> [8] [9] [1]
    // [5] [6] [7] <> [8] [9] [1] <> [2] [3] [4]
    // [8] [9] [1] <> [2] [3] [4] <> [5] [6] [7]
    //
    // [3] [4] [5] <> [6] [7] [8] <> [9] [1] [2]
    // [6] [7] [8] <> [9] [1] [2] <> [3] [4] [5]
    // [9] [1] [2] <> [3] [4] [5] <> [6] [7] [8]

    public Field() {
        this.solutionField = new int[this.size][this.size];
//        for (int i = 0; i < this.size; i++) {
//            generateRow(i);
//        }

//        for test
//        System.out.println(this);

//        List<Operation> operationsList = new ArrayList<>();
//        for (int i = 0; i < 400; i++) {
//            operationsList.add(Operation.values()[random.nextInt(Operation.values().length)]);
//        }

//        for test
//        operationReport(operationsList);

//        operationsList.add(Operation.TRANSPOSE);
//        operationsList.add(Operation.SWAP_ROWS);
//        operationsList.add(Operation.SWAP_COLUMNS);
//        operationsList.add(Operation.SWAP_ROW_AREAS);
//        operationsList.add(Operation.SWAP_COLUMN_AREAS);

//        operationManager(operationsList);
        genRandBox(0,0);
        this.solutionField = genField(this.solutionField);
    }

    private void generateRow(int row) {
        int startValue = 1 + row / areaSize + ((row % areaSize) * areaSize);
        for (int i = 0; i < size; i++) {
            solutionField[row][i] = startValue;
            startValue++;
            if(startValue == size + 1) startValue = 1;
        }
    }

    private void genRandBox(int row, int col){
        List<Integer> availableNums = new ArrayList<>();
        for (int i = 1; i <= size; i++) {
            availableNums.add(i);
        }
        int[][] box = new int[areaSize][areaSize];
        for (int i = 0; i < areaSize; i++) {
            for (int j = 0; j < areaSize; j++) {
                box[i][j] = availableNums.get(random.nextInt(availableNums.size()));
                availableNums.remove((Integer) box[i][j]);
            }
        }

        // test
//        box = new int[][] { {1,2,3} , {4,5,6} ,{7,8,9} };

        for (int i = 0; i < areaSize; i++) {
            for (int j = 0; j < areaSize; j++) {
                solutionField[row + i][col + j] = box[i][j];
            }
        }
    }

    private int[][] genField(int[][] field){
        int[] firstEmpty = findEmpty(field);
        if(firstEmpty == null) { // field is ready
            return field;
        }
        int emptyI = firstEmpty[0];
        int emptyJ = firstEmpty[1];

        // more random
        int startValue = random.nextInt(size);
        int[] values = new int[size];
        for (int i = 0; i < size; i++) { values[i] = ((startValue + i) % size) + 1; }
        for (int i = 0; i < size; i++) {
            int value = values[i];
            if(isValid(value, emptyI, emptyJ, field)){
                int[][] newField = copyOfField(field);
                newField[emptyI][emptyJ] = value;
                if((newField = genField(newField)) != null){
                    return newField;
                }
            }
        }

//        for (int i = 1; i <= size; i++) {
//            if(isValid(i, emptyI, emptyJ, field)){
//                int[][] newField = copyOfField(field);
//                newField[emptyI][emptyJ] = i;
//                if((newField = genField(newField)) != null){
//                    return newField;
//                }
//            }
//        }
        return null;
    }

    private int[] findEmpty(int[][] field){
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                if(field[i][j] == 0) {
                    return new int[] {i,j};
                }
            }
        }
        return null;
    }

    private boolean isValid(int val, int row, int col, int[][] field) {
        for (int i = 0; i < size; i++) {
            if(field[i][col] == val) { return false; }
        }
        for (int j = 0; j < size; j++) {
            if(field[row][j] == val) { return false; }
        }
        int baseI = row / areaSize * areaSize;
        int baseJ = col / areaSize * areaSize;
        for (int i = 0; i < areaSize; i++) {
            for (int j = 0; j < areaSize; j++) {
                if(field[baseI+i][baseJ+j] == val) { return false; }
            }
        }
        return true;
    }
    private void transpose() {
        for (int i = 0; i < size; i++) {
            for (int j = i+1; j < size; j++) {
                int tmp = solutionField[i][j];
                solutionField[i][j] = solutionField[j][i];
                solutionField[j][i] = tmp;
            }
        }
    }
    private void swapRows() {
        // we can swap rows only in one rowsArea
        int rowsArea = random.nextInt(size / areaSize);
        // My row areas numbers
        // [0] [0] [0] (0,1,2)
        // [1] [1] [1] (3,4,5)
        // [2] [2] [2] (6,7,8)

        // now we need to choose two rows inside the rowsArea
        List<Integer> rows = new ArrayList<>();
        for (int i = 0; i < areaSize; i++) {
            rows.add( rowsArea * areaSize + i);
        }

        int rowNumber1 = rows.get(random.nextInt(rows.size()));
        rows.remove((Integer) rowNumber1);
        int rowNumber2 = rows.get(random.nextInt(rows.size()));

        int[] tmpRow = solutionField[rowNumber1];
        solutionField[rowNumber1] = solutionField[rowNumber2];
        solutionField[rowNumber2] = tmpRow;
    }
    private void swapColumns() {
        // we can swap columns only in one columnsArea
        int columnsArea = random.nextInt(size / areaSize);
        // My column areas numbers
        // [0]      [1]      [2]
        // [0]      [1]      [2]
        // [0]      [1]      [2]
        // (0,1,2)  (3,4,5)  (6,7,8)

        // now we need to choose two columns inside the columnsArea
        List<Integer> columns = new ArrayList<>();
        for (int i = 0; i < areaSize; i++) {
            columns.add( columnsArea * areaSize + i);
        }

        int columnNumber1 = columns.get(random.nextInt(columns.size()));
        columns.remove((Integer) columnNumber1);
        int columnNumber2 = columns.get(random.nextInt(columns.size()));

        int tmp;
        for (int i = 0; i < size; i++) {
            tmp = solutionField[i][columnNumber1];
            solutionField[i][columnNumber1] = solutionField[i][columnNumber2];
            solutionField[i][columnNumber2] = tmp;
        }
    }
    private void swapRowAreas() {
        // we need to choose 2 random rowAreas
        List<Integer> rowAreas = new ArrayList<>();
        for (int i = 0; i < size/areaSize; i++) {
            rowAreas.add(i);
        }
        // My row areas numbers
        // [0] [0] [0] (0,1,2)
        // [1] [1] [1] (3,4,5)
        // [2] [2] [2] (6,7,8)

        int rowAreaNumber1 = rowAreas.get(random.nextInt(rowAreas.size()));
        rowAreas.remove((Integer) rowAreaNumber1);
        int rowAreaNumber2 = rowAreas.get(random.nextInt(rowAreas.size()));

        int[] tmp;
        for (int i = 0; i < areaSize; i++) {
            tmp = solutionField[rowAreaNumber1 * areaSize + i];
            solutionField[rowAreaNumber1 * areaSize + i] = solutionField[rowAreaNumber2 * areaSize + i];
            solutionField[rowAreaNumber2 * areaSize + i] = tmp;
        }
    }
    private void swapColumnAreas() {
        // we need to choose 2 random columnAreas
        List<Integer> columnAreas = new ArrayList<>();
        for (int i = 0; i < size/areaSize; i++) {
            columnAreas.add(i);
        }
        // My column areas numbers
        // [0]      [1]      [2]
        // [0]      [1]      [2]
        // [0]      [1]      [2]
        // (0,1,2)  (3,4,5)  (6,7,8)

        int columnAreaNumber1 = columnAreas.get(random.nextInt(columnAreas.size()));
        columnAreas.remove((Integer) columnAreaNumber1);
        int columnAreaNumber2 = columnAreas.get(random.nextInt(columnAreas.size()));

        int tmp;
        for (int j = 0; j < areaSize; j++) {
            for (int i = 0; i < size; i++) {
                tmp = solutionField[i][columnAreaNumber1 * areaSize + j];
                solutionField[i][columnAreaNumber1 * areaSize + j] = solutionField[i][columnAreaNumber2 * areaSize + j];
                solutionField[i][columnAreaNumber2 * areaSize + j] = tmp;
            }
        }
    }
    private void operationManager(List<Operation> operationList) {
        for (Operation operation : operationList) {
            switch (operation) {
                case TRANSPOSE -> transpose();
                case SWAP_ROWS -> swapRows();
                case SWAP_COLUMNS -> swapColumns();
                case SWAP_ROW_AREAS -> swapRowAreas();
                case SWAP_COLUMN_AREAS -> swapColumnAreas();
            }
        }
    }

    public int[][] getSolution() {
        return solutionField;
    }
    public int[][] getEmptyField() {
        return emptyField;
    }
    @Override
    public String toString() {
        int numSize = String.valueOf(size).length();
        StringBuilder sb = new StringBuilder();

        if (numSize == 1) {
            for (int i = 0; i < size; i++) {
                for (int j = 0; j < areaSize; j++) {
                    sb.append("[");
                    for (int k = 0; k < areaSize; k++) {
                        sb.append(solutionField[i][(j*areaSize)+k]);
                        if(k != areaSize - 1) { sb.append(" "); }
                    }
                    sb.append("]  ");
                }
                sb.append("\n");
                if(i % areaSize == areaSize - 1) { sb.append("\n"); }
            }
        }
        else {
            for (int i = 0; i < size; i++) {
                for (int j = 0; j < areaSize; j++) {
                    sb.append("[");
                    for (int k = 0; k < areaSize; k++) {
                        String tmp = String.valueOf(solutionField[i][(j*areaSize)+k]);
                        if(tmp.length() == numSize) { sb.append(tmp); }
                        else {
                            int delta = numSize - tmp.length();
                            sb.append("0".repeat(delta)).append(tmp);
                        }
                        if(k != areaSize - 1) { sb.append(" "); }
                    }
                    sb.append("]  ");
                }
                sb.append("\n");
                if(i % areaSize == areaSize - 1) { sb.append("\n"); }
            }
        }
        return sb.toString();
    }
    private int[][] copyOfField(int[][] field) {
        int[][] result = new int[size][size];
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                result[i][j] = field[i][j];
            }
        }
        return result;
    }
//    private void operationReport(List<Operation> operationList) {
//        Map<String,Integer> operationsFrequency = new HashMap<>();
//        for (Operation o : operationList) {
//            operationsFrequency.put(o.name(),operationsFrequency.getOrDefault(o.name(),0) + 1);
//        }
//
//        SimpleDateFormat sdf = new SimpleDateFormat("yy-MM-dd HH:mm:ss", Locale.ENGLISH);
//        try (FileWriter writer = new FileWriter(
//                "/Users/aleksandrbakin/Dev/Java/JavaProjects/DifferentProjects/src/masa/java/sudoku/reports/" +
//                sdf.format(new Date()))) {
//            for (Map.Entry<String,Integer> entry : operationsFrequency.entrySet()) {
//                writer.write(entry.getKey() + " : " + entry.getValue() + "\n");
//            }
//        } catch (IOException e) {
//            throw new RuntimeException(e);
//        }
//
//    }

    enum Operation {
        TRANSPOSE,
        SWAP_ROWS,
        SWAP_COLUMNS,
        SWAP_ROW_AREAS,
        SWAP_COLUMN_AREAS
    }
}
